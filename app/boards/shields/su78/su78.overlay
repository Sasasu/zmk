#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/matrix_transform.h>

/ {
	chosen {
		zmk,kscan = &kscan0;
		zmk,matrix-transform = &default_transform;
		zmk,battery = &vbatt;
	};

	sensors: sensors {
		compatible = "zmk,keymap-sensors";
		sensors = <&encoder>;
		triggers-per-rotation = <20>;
	};

	encoder: encoder {
		compatible = "alps,ec11";
		steps = <80>;
		a-gpios = <&arduino_header 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
		b-gpios = <&arduino_header 14 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
		status = "ok";
	};

	default_transform: keymap_transform_0 {
		compatible = "zmk,matrix-transform";
		rows = <7>;
		columns = <19>;

		map = <
			RC(0, 0) RC(0, 1) RC(0, 2) RC(0, 3) RC(0, 4) RC(0, 5) RC(0, 6) RC(0, 7) RC(0, 8) RC(0, 9) RC(0,10) RC(0,11) RC(0,12) RC(0,13) RC(0, 14)
			RC(1, 0) RC(1, 1) RC(1, 2) RC(1, 3) RC(1, 4) RC(1, 5) RC(1, 6) RC(1, 7) RC(1, 8) RC(1, 9) RC(1,10) RC(1,11) RC(1,12) RC(1,13) RC(0, 15)
			RC(2, 0) RC(2, 1) RC(2, 2) RC(2, 3) RC(2, 4) RC(2, 5) RC(2, 6) RC(2, 7) RC(2, 8) RC(2, 9) RC(2,10) RC(2,11) RC(2,12) RC(2,13) RC(0, 16)
			RC(3, 0) RC(3, 1) RC(3, 2) RC(3, 3) RC(3, 4) RC(3, 5) RC(3, 6) RC(3, 7) RC(3, 8) RC(3, 9) RC(3,10) RC(3,11)          RC(3,13)
			RC(4, 0)          RC(4, 2) RC(4, 3) RC(4, 4) RC(4, 5) RC(4, 6) RC(4, 7) RC(4, 8) RC(4, 9) RC(4,10) RC(4,11)          RC(4,13) RC(0, 17)
			RC(5, 0) RC(5, 1) RC(5, 2)                            RC(5, 6)                            RC(5,10) RC(5,11) RC(5,12) RC(5,13) RC(0, 18)
		>;
	};

	kscan0: kscan_0 {
		compatible = "zmk,kscan-gpio-matrix";
		diode-direction = "row2col";
		wakeup-source;

		col-gpios
			= <&key_matrix_col 15 GPIO_ACTIVE_HIGH> // 0
			, <&key_matrix_col 14 GPIO_ACTIVE_HIGH> // 1
			, <&key_matrix_col  0 GPIO_ACTIVE_HIGH> // 2
			, <&key_matrix_col  1 GPIO_ACTIVE_HIGH> // 3
			, <&key_matrix_col  2 GPIO_ACTIVE_HIGH> // 4
			, <&key_matrix_col  3 GPIO_ACTIVE_HIGH> // 5
			, <&key_matrix_col  4 GPIO_ACTIVE_HIGH> // 6
			, <&key_matrix_col  5 GPIO_ACTIVE_HIGH> // 7
			, <&key_matrix_col 13 GPIO_ACTIVE_HIGH> // 8
			, <&key_matrix_col 12 GPIO_ACTIVE_HIGH> // 9
			, <&key_matrix_col 11 GPIO_ACTIVE_HIGH> // 10
			, <&key_matrix_col 10 GPIO_ACTIVE_HIGH> // 11
			, <&key_matrix_col  9 GPIO_ACTIVE_HIGH> // 11
			, <&key_matrix_col  8 GPIO_ACTIVE_HIGH> // 13

			, <&arduino_header 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // 14 = P0.20 (EC11)
			, <&arduino_header 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // 15 = P0.15
			, <&arduino_header  9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // 16 = P0.14
			, <&arduino_header 17 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // 17 = P0.23
			, <&arduino_header 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // 18 = P0.24
			;

		row-gpios
			= <&key_matrix_row 5 GPIO_ACTIVE_HIGH> // 0
			, <&key_matrix_row 4 GPIO_ACTIVE_HIGH> // 1
			, <&key_matrix_row 3 GPIO_ACTIVE_HIGH> // 2
			, <&key_matrix_row 2 GPIO_ACTIVE_HIGH> // 3
			, <&key_matrix_row 1 GPIO_ACTIVE_HIGH> // 4
			, <&key_matrix_row 0 GPIO_ACTIVE_HIGH> // 5
			;
	};

	vbatt: vbatt {
		compatible = "zmk,battery-voltage-divider";
		io-channels = <&adc 0>;
		output-ohms = <100>;
		full-ohms = <(100 + 160)>;
	};
};

&adc {
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";
	channel@0 {
		reg = <0>;
		zephyr,gain = "ADC_GAIN_1_6";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
		zephyr,input-positive = <NRF_SAADC_AIN0>; /* P0.02 */
		zephyr,resolution = <12>;
	};
};

&arduino_i2c {
	#address-cells = <1>;
	#size-cells = <0>;

	status = "ok";
	clock-frequency = <400000>;

	key_matrix_col: pca95xx@0x20 {
		compatible = "nxp,pca95xx";
		gpio-controller;
		#gpio-cells = <2>;

		wakeup-source;

		reg = <0x20>;
		ngpios = <16>;
		interrupt-gpios = <&arduino_header 21 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; // P0.27
	};

	key_matrix_row: pca95xx@0x21{
		compatible = "nxp,pca95xx";
		gpio-controller;
		#gpio-cells = <2>;

		reg = <0x21>;
		ngpios = <16>;
		interrupt-gpios = <&arduino_header 21 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; // P0.27
	};
};

&pinctrl {
	uart0_default: uart0_default {
		group1 {
			psels = <NRF_PSEL(UART_TX, 0, 3)>,
					<NRF_PSEL(UART_RX, 0, 4)>,
					<NRF_PSEL(UART_RTS, 0, 5)>,
					<NRF_PSEL(UART_CTS, 0, 6)>;
		};
	};

	uart0_sleep: uart0_sleep {
		group1 {
			psels = <NRF_PSEL(UART_TX, 0, 3)>,
					<NRF_PSEL(UART_RX, 0, 4)>,
					<NRF_PSEL(UART_RTS, 0, 5)>,
					<NRF_PSEL(UART_CTS, 0, 6)>;
			low-power-enable;
		};
	};

	i2c0_default: i2c0_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 26)>,
					<NRF_PSEL(TWIM_SCL, 0, 25)>;
			bias-pull-up;
		};
	};

	i2c0_sleep: i2c0_sleep {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 26)>,
					<NRF_PSEL(TWIM_SCL, 0, 25)>;
			bias-pull-up;
			low-power-enable;
		};
	};
};

&uart0 {
	status = "disabled";
	// status = "ok";
};
